package org.notariado.inti;

import javax.annotation.Resource;
import javax.jws.HandlerChain;
import javax.jws.WebService;
import javax.xml.ws.BindingType;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.WebServiceException;

import org.notariado.inti.contexto.CallContextConstants;
import org.notariado.inti.escritura.GestionEscriturasFactory;
import org.notariado.inti.escritura.InsertadorEscritura;
import org.notariado.inti.escritura.JustificantePresentacion;
import org.notariado.inti.exceptions.ConstructorRespuestaException;
import org.notariado.inti.exceptions.RecepcionException;
import org.notariado.inti.mensajes.ConstructorMensajeRespuestaConsulta;
import org.notariado.inti.preferencias.Preferencias;
import org.notariado.inti.utils.Utils;
import org.notariado.inti.utils.log.LogFactory;
import org.notariado.inti.utils.log.Logger;

/**
 * This class was generated by the JAX-WS RI. Oracle JAX-WS 2.1.3-06/19/2008
 * 07:03 PM(bt) Generated source version: 2.1
 * 
 */
@WebService(portName = "SOAPGateway", serviceName = "SOAPGatewayService", targetNamespace = "http://inti.notariado.org/XML/COMUNICACIONES", wsdlLocation = "/wsdls/comunicaciones-soap-gateway.wsdl", endpointInterface = "org.notariado.inti.SOAPGateway")
@BindingType("http://schemas.xmlsoap.org/wsdl/soap/http")
@HandlerChain (file="HandlerChain.xml")
public class RecepcionEscrituraImpl implements SOAPGateway {

	//Recuperamos el contexto del servicio. En este punto, se debería tener un id único para los logs.
	//Si no se tiene, significa que no se ha hecho en las capas de manejadores, y se hará ahora.
	
	@Resource WebServiceContext wContext;
	
	public RecepcionEscrituraImpl() {
	}

	/**
	 * Procesa la llamada de alta de escritura.
	 * @param partRequest
	 * @return returns org.notariado.inti.COMUNICACION
	 */
	public COMUNICACION process(COMUNICACION partRequest) {
		Logger log=null;
		COMUNICACION respuesta;
		ConstructorMensajeRespuestaConsulta resCons;
		String idLlamada="";
		try{
			resCons = (ConstructorMensajeRespuestaConsulta) wContext.getMessageContext().get(CallContextConstants.CONSTRUCTOR_RESPUESTA);
			Preferencias pref= (Preferencias) wContext.getMessageContext().get(CallContextConstants.PREFERENCIAS);
			if (pref==null)
			{
				//Error grave, debe llegar. Si no, no está bien instalado.
				//No podemos escribir ni siquiera a log. 
				System.out.println ("Recepción de escrituras de Plusvalías::Error de configuración. No se pueden recuperar las preferencias.");
				return resCons.buildResultadoErrorGenerico("Error técnico por problema de configuración de servicio. Por favor, intente acceder al servicio pasados unos minutos");
			}
			idLlamada = (String) wContext.getMessageContext().get(CallContextConstants.IDSESION);
			if (idLlamada == null)
			{
				//¿No debería ser un error?.
				idLlamada = Utils.getIdLlamada();
			}
			log = LogFactory.newLogger(pref.getModoLog(), pref.getFicheroLogAplicacion(), "Sesión::"+idLlamada);
			log.info("INICIO.Entrada de petición " + idLlamada);
			log.info("1.Alta de escritura.");
			//Insertar escritura.
			InsertadorEscritura ins= GestionEscriturasFactory.newInsertadorEscritura(pref, idLlamada);
			if (ins.insertarEscritura(partRequest.getREQUEST())) 
			{
				log.info ("2. Generación de justificante");
				//Ahora, generamos el reimprimible de justificante de presentación.
				JustificantePresentacion jus = GestionEscriturasFactory.newJustificantePresentacion(pref, log, idLlamada);
				try
				{
					String protocolo_bis=String.valueOf(partRequest.getREQUEST().getDATOSCOMUNICACION().getNUMERODOCUMENTOBIS());
					if ("null".equals(protocolo_bis))
					{
						protocolo_bis="0";
					}
					String doc=jus.generarJustificante("33", partRequest.getREQUEST().getDATOSCOMUNICACION().getCODIGOULTIMASVOLUNTADES(),
										    partRequest.getREQUEST().getDATOSCOMUNICACION().getCODIGONOTARIA(), 
										    String.valueOf(partRequest.getREQUEST().getDATOSCOMUNICACION().getNUMERODOCUMENTO()), 
										    protocolo_bis, 
										    Utils.calendarToString(partRequest.getREQUEST().getDATOSCOMUNICACION().getFECHAAUTORIZACION(),"dd/MM/yyyy"), 
										    partRequest.getREQUEST().getDATOSCOMUNICACION().getCODIGOAYUNTAMIENTO());
					//Alta de informe.
					log.info("3. Alta de justificante");
					String resAlta = jus.altaDocumento();
					if (!"0000".equals(resAlta))
					{
						log.error("2.1. Error, no se ha podido dar de alta en DOIN el documento generado.");
						respuesta=resCons.buildResultadoErrorTemporal("No se ha podido almacenar el justificante de presentación.");
					}
					else
					{
						respuesta= resCons.buildResultadoOk("Operación terminada correctamente.", doc);
					}
				}
				catch (RecepcionException e) {
					log.error("2.1. Error en la generación o alta de justificante:"+e.getMessage(), e);
					respuesta=resCons.buildResultadoErrorTemporal("No se ha podido generar correctamente el justificante de presentación.");
				}
			}
			else 
			{
				log.error("1.1. No se ha podido recibir la escritura");
				//Si no se ha podido insertar, es un fallo. Supongamos que temporal, porque no 
				//tenemos información para decir más.
				respuesta=resCons.buildResultadoErrorTemporal("No se ha podido recibir correctamente la escritura.");
			}
		}
		catch (ConstructorRespuestaException e)
		{
			//Grave. No podemos escribir la respuesta, tenemos que lanzar una excepción.
			if (log!=null)
			{
				log.error("Error==>Error al construir el mensaje de respuesta del servicio:"+e.getMessage(), e);
			}
			throw new WebServiceException("Error técnico grave en el proceso del mensaje.");
		} 
		finally
		{
			if (log!=null)
			{
				log.info("FIN. Salida de petición " + idLlamada);
			}
		}
		
		return respuesta;
	}

}
